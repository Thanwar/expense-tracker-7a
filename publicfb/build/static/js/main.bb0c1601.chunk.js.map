{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","firebase.js","components/Header.js","components/Balance.js","components/AmountSummary.js","components/Transaction.js","components/History.js","components/AddTransaction.js","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","delTransaction","addTransaction","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","Balance","balance","useContext","map","transactionAmount","reduce","acc","item","toFixed","AmountSummary","transactionAmounts","income","expense","className","Transaction","sign","transactionType","description","Math","abs","onClick","History","AddTransaction","useState","setDescription","setTransactionAmount","onSubmit","e","preventDefault","newTransaction","Date","getTime","htmlFor","placeholder","onChange","target","App","messaging","requestPermission","then","getToken","token","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bb0c1601.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions\r\n        .filter(transaction => transaction.id !== action.payload),\r\n      };\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions:  [action.payload, ...state.transactions]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from './AppReducer';\r\n\r\n// creating the initial state\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n};\r\n\r\n// global context\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider for the global context\r\n\r\nexport const GlobalProvider = ({children}) => {\r\n    \r\n    const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n\r\n    // Actions for transactions\r\n\r\n    function delTransaction(id){\r\n      dispatch({\r\n        type: 'DELETE_TRANSACTION',\r\n        payload: id\r\n      });\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n      dispatch({\r\n        type: 'ADD_TRANSACTION',\r\n        payload: transaction\r\n      });\r\n    }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        delTransaction,\r\n        addTransaction\r\n      }}\r\n    >\r\n        {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"," import firebase from 'firebase';\r\n \r\n \r\n // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyB4byOIjkR5rBQ8iCAzuGybJkuCO3bCWYA\",\r\n    authDomain: \"expenceker.firebaseapp.com\",\r\n    projectId: \"expenceker\",\r\n    storageBucket: \"expenceker.appspot.com\",\r\n    messagingSenderId: \"234618435074\",\r\n    appId: \"1:234618435074:web:25d10ce493e0bf48ff591b\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h1>\r\n            Thanwar Expense Tracker\r\n        </h1>\r\n    )\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const transactionAmounts = transactions.map(\r\n    (transaction) => transaction.transactionAmount\r\n  );\r\n\r\n  const balance = transactionAmounts\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Current Balance</h4>\r\n      <h1 id=\"balance\">$ {balance}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const AmountSummary = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const transactionAmounts = transactions.map(\r\n    (transaction) => transaction.transactionAmount\r\n  );\r\n\r\n  const income = transactionAmounts\r\n    .filter((transaction) => transaction > 0)\r\n    .reduce((acc, transaction) => (acc += transaction), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = transactionAmounts\r\n    .filter((transaction) => transaction < 0)\r\n    .reduce((acc, transaction) => (acc += transaction), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money plus\">${income}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">${expense}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n\r\n  const { delTransaction } = useContext(GlobalContext);\r\n\r\n  const sign = transaction.transactionAmount > 0 ? \"+\" : \"-\";\r\n\r\n  const transactionType = transaction.transactionAmount > 0 ? \"plus\" : \"minus\";\r\n\r\n  return (\r\n    <li className={transactionType}>\r\n      {transaction.description}\r\n      <span>\r\n        {sign}${Math.abs(transaction.transactionAmount)}\r\n      </span>\r\n      <button className=\"delete-btn\" onClick={()=>delTransaction(transaction.id)}>X</button>\r\n    </li>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\nexport const History = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Transaction History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => (\r\n          <Transaction key={transaction.id} transaction={transaction} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const AddTransaction = () => {\r\n\r\n  const [description,setDescription] = useState('');\r\n  const [transactionAmount,setTransactionAmount] = useState();\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = (e)=>{\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: new Date().getTime(),\r\n      description,\r\n      transactionAmount: +transactionAmount\r\n    }\r\n\r\n    addTransaction(newTransaction);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Add Transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"description\">Description</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"description\"\r\n            placeholder=\"Detail of transaction\"\r\n            value = {description}\r\n            onChange={(e)=>setDescription(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"transactionAmount\">Transaction Amount</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"transactionAmount\"\r\n            placeholder=\"Enter transaction amount\"\r\n            value = {transactionAmount}\r\n            onChange={(e)=>setTransactionAmount(e.target.value)}\r\n\r\n          />\r\n        </div>\r\n        <button className=\"btn\"> Add Transaction</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport firebase from \"./firebase\";\n\n// Components\nimport { Header         } from \"./components/Header\";\nimport { Balance        } from \"./components/Balance\";\nimport { AmountSummary  } from \"./components/AmountSummary\";\nimport { History        } from \"./components/History\";\nimport { AddTransaction } from \"./components/AddTransaction\";\n\nfunction App() {\n\n  const messaging = firebase.messaging();\n  messaging.requestPermission().then(()=>{\n    return messaging.getToken();\n  }).then((token)=>{\n    console.log('token',token);\n    \n  })\n\n\n\n\n  return (\n    <div>\n      <GlobalProvider>\n        <Header />\n        <div className=\"container\">\n          <Balance />\n          <AmountSummary />\n          <History />\n          <AddTransaction />\n        </div>\n      </GlobalProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  console.log(\"====> Registered\")\n\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}